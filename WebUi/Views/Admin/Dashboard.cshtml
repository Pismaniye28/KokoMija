@model DashboardModel
@{
    Layout = "_Layout";
}
@section Css
{
    <link rel="stylesheet" href="//cdn.datatables.net/1.10.20/css/jquery.dataTables.min.css">
}
  
@section Scripts
{
  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/feather-icons@4.28.0/dist/feather.min.js" integrity="sha384-uO3SXW5IuS1ZpFPKugNNWqTZRRglnUJK6UAZ/gxOX80nxEkN9NcGZTftn6RzhGWE" crossorigin="anonymous"></script><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js" integrity="sha384-zNy6FEbO50N+Cg5wap8IKA4M/ZnLJgzc6w2NqACZaK0u0FXfOWRRJOnQtpZun8ha" crossorigin="anonymous"></script><script src="dashboard.js"></script>
  <script src="//cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
    <script>
        $(document).ready( function () {
            $('#myTable').DataTable();
        });
    </script>
    
    <script>
        // Get data from the model
        var completedOrders = @Html.Raw(Json.Serialize(Model.CompletedOrders));
        
        // Extract order dates and counts
        var orderDates = completedOrders.map(order => order.OrderDate);
        var orderCounts = completedOrders.length;

        // Create chart
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: orderDates,
                datasets: [{
                    label: 'Completed Orders',
                    data: orderCounts,
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true,
                            stepSize: 1
                        }
                    }]
                }
            }
        });
    </script>

}

<div class="container-fluid">
  <div class="row">
     <nav id="sidebarMenu" class="d-flex flex-column flex-shrink-0 p-3 text-bg-dark rounded-4 col">
       @await Component.InvokeAsync("Dashboard")
    </nav>

    <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4"><div class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand"><div class=""></div></div><div class="chartjs-size-monitor-shrink"><div class=""></div></div></div>

    <div class="d-flex justify-content-between align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">Dashboard</h1>
        <div class="btn-toolbar">
            <div class="btn-group me-2">
                <button type="button" class="btn btn-sm btn-outline-secondary">Share</button>
                <button type="button" class="btn btn-sm btn-outline-secondary">Export</button>
            </div>
            <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-calendar align-text-bottom" aria-hidden="true"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>
                This week
            </button>
            <div class="dropdown-menu">
                <a class="dropdown-item" href="#">This week</a>
                <a class="dropdown-item" href="#">Last week</a>
                <a class="dropdown-item" href="#">This month</a>
                <a class="dropdown-item" href="#">Last month</a>
            </div>
        </div>
    </div>


      <canvas class="my-4 w-100 chartjs-render-monitor" id="myChart" width="2228" height="940" style="display: block; width: 1114px; height: 470px;"></canvas>

      <h2>Completed Orders</h2>
      <div class="table-responsive">
        <table class="table table-success table-striped-columns table-hover table-bordered">
          <thead>
              <tr>
                  <th scope="col">#</th>
                  <th scope="col">Order Number</th>
                  <th scope="col">Order Date</th>
                  <th scope="col">Payment Type</th>
                  <th scope="col">Order State</th>
                  <th scope="col">Total Price</th>
                  <th scope="col">Developers Cut</th>
                  <th scope="col">Stripe Cut</th>
                  <th scope="col">Tax Cut</th>
                  <th scope="col">Other Expenses</th>
                  <th scope="col">Profit</th>
                  
              </tr>
          </thead>
  <tbody>
    @for (int i = 0; i < Model.CompletedOrders.Count; i++)
    {
        var order = Model.CompletedOrders[i];
        <tr>
            <th scope="row">@(i + 1)</th>
            <td>          @{
                // Define a maximum length for the OrderNumber
                var maxLength = 10; // Change this to your desired maximum length
                var orderNumber = order.OrderNumber;

                // Check if the OrderNumber is longer than the maximum length
                if (orderNumber.Length > maxLength)
                {
                    // Truncate the OrderNumber and add ellipsis
                    orderNumber = orderNumber.Substring(0, maxLength) + "...";
                }

                @orderNumber
            }</td>
            <td>@order.OrderDate.ToShortDateString()</td>
            <td>@order.PaymentType</td>
            <td>@order.OrderState</td>
            <td>@foreach (var item in order.OrderItems)
            {
                <div>@item.Price</div>
            }</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
    }
</tbody>
        </table>
      </div>
    </main>
  </div>
</div>


  

